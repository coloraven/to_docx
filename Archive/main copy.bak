package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"mime/multipart"
	"net/http"
	"os"
	"path/filepath"
	"strings"
	"time"
)

const (
	apiConvertURL  = "http://192.168.2.128:8500/convert"
	apiDownloadURL = "http://192.168.2.128:8500/download/"
	tempDir        = "converted_files"
)

// 支持的文件扩展名
var supportedExtensions = []string{".doc", ".wps"}

// FileResponse 定义转换 API 的响应结构
type FileResponse struct {
	Message       string `json:"message"`
	DownloadURL   string `json:"download_url"`
	RetentionTime int    `json:"retention_time"`
}

// convertFile 调用 API 上传并转换文件
func convertFile(filePath string) (string, error) {
	fmt.Printf("正在转换: %s\t", filePath)

	// 打开文件
	file, err := os.Open(filePath)
	if err != nil {
		return "", fmt.Errorf("failed to open file: %v", err)
	}
	defer file.Close()

	// 创建 multipart 表单
	body := &bytes.Buffer{}
	writer := multipart.NewWriter(body)
	part, err := writer.CreateFormFile("file", filepath.Base(filePath))
	if err != nil {
		return "", fmt.Errorf("failed to create form file: %v", err)
	}
	if _, err = io.Copy(part, file); err != nil {
		return "", fmt.Errorf("failed to copy file content: %v", err)
	}

	// 添加其他表单字段
	_ = writer.WriteField("target_format", "docx")
	_ = writer.WriteField("retention_time", "60")
	writer.Close()

	// 发送 POST 请求
	req, err := http.NewRequest("POST", apiConvertURL, body)
	if err != nil {
		return "", fmt.Errorf("failed to create request: %v", err)
	}
	req.Header.Set("Content-Type", writer.FormDataContentType())

	client := &http.Client{Timeout: 300 * time.Second} // 设置超时时间
	resp, err := client.Do(req)
	if err != nil {
		return "", fmt.Errorf("failed to send request: %v", err)
	}
	defer resp.Body.Close()

	// 处理响应
	if resp.StatusCode != http.StatusOK {
		return "", fmt.Errorf("conversion failed: %s", resp.Status)
	}

	var fileResponse FileResponse
	if err = json.NewDecoder(resp.Body).Decode(&fileResponse); err != nil {
		return "", fmt.Errorf("failed to parse response: %v", err)
	}

	if fileResponse.DownloadURL == "" {
		return "", fmt.Errorf("no download URL in response")
	}
	return fileResponse.DownloadURL, nil
}

// downloadFile 下载转换后的文件
func downloadFile(downloadURL, outputPath string) error {
	fullDownloadURL := apiDownloadURL + filepath.Base(downloadURL)
	// fmt.Printf("Downloading from: %s...\n", fullDownloadURL)

	resp, err := http.Get(fullDownloadURL)
	if err != nil {
		return fmt.Errorf("failed to send download request: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("download failed: %s", resp.Status)
	}

	outFile, err := os.Create(outputPath)
	if err != nil {
		return fmt.Errorf("failed to create file: %v", err)
	}
	defer outFile.Close()

	if _, err := io.Copy(outFile, resp.Body); err != nil {
		return fmt.Errorf("failed to save file: %v", err)
	}
	// fmt.Printf("Downloaded to: %s\n", outputPath)
	return nil
}

// findFiles 递归查找符合扩展名的文件
func findFiles(root string) ([]string, error) {
	var files []string
	err := filepath.Walk(root, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}
		if !info.IsDir() && isSupportedExtension(filepath.Ext(path)) {
			files = append(files, path)
		}
		return nil
	})
	return files, err
}

// isSupportedExtension 检查文件扩展名是否受支持
func isSupportedExtension(ext string) bool {
	ext = strings.ToLower(ext)
	for _, supported := range supportedExtensions {
		if ext == supported {
			return true
		}
	}
	return false
}

func main() {
	startTime := time.Now()

	// 创建输出目录
	if _, err := os.Stat(tempDir); os.IsNotExist(err) {
		if err := os.MkdirAll(tempDir, os.ModePerm); err != nil {
			fmt.Printf("Failed to create output directory: %v\n", err)
			return
		}
	}

	// 查找所有符合条件的文件
	files, err := findFiles(".")
	if err != nil {
		fmt.Printf("Failed to find files: %v\n", err)
		return
	}

	if len(files) == 0 {
		fmt.Println("当前目录及其子目录下未找到需要转换的doc或wps文件.")
		return
	}

	fmt.Printf("共找到 %d 个需要转换的doc或wps文件.\n", len(files))

	successfulConversions := 0

	// 转换和下载文件
	for _, filePath := range files {
		fileStartTime := time.Now()

		// 转换文件
		downloadURL, err := convertFile(filePath)
		if err != nil {
			fmt.Printf("Failed to convert %s: %v\n", filePath, err)
			continue
		}

		// 生成输出路径
		relativePath, _ := filepath.Rel(".", filePath)
		convertedFilename := strings.TrimSuffix(relativePath, filepath.Ext(relativePath)) + ".docx"
		outputPath := filepath.Join(tempDir, convertedFilename)

		// 创建子目录
		if err := os.MkdirAll(filepath.Dir(outputPath), os.ModePerm); err != nil {
			fmt.Printf("Failed to create output directory for %s: %v\n", filePath, err)
			continue
		}

		// 下载文件
		if err := downloadFile(downloadURL, outputPath); err != nil {
			fmt.Printf("Failed to download file %s: %v\n", filePath, err)
			continue
		}

		successfulConversions++
		fmt.Printf("耗时: %.2f 秒\n", time.Since(fileStartTime).Seconds())
	}

	// 打印汇总信息
	totalTime := time.Since(startTime).Seconds()
	avgTime := totalTime / float64(successfulConversions)
	fmt.Printf("\n当前目录及其子目录下所有doc、wps文件转换完成:\n")
	fmt.Printf("提交文件总数: %d\n", len(files))
	fmt.Printf("成功转换文件数: %d\n", successfulConversions)
	fmt.Printf("总耗时: %.2f 秒\n", totalTime)
	fmt.Printf("平均耗时(秒/文件): %.2f 秒\n", avgTime)
}
